generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CurrencyType {
  BTC
  ETH
  XRP
  DOGE
}

enum FiatType {
  THB
  USD
}

model users {
  id                         Int       @id @default(autoincrement())
  firstName                  String?
  lastName                   String?
  email                      String    @unique
  password                   String?
  emailVerified              Boolean   @default(false)
  emailVerifiedAt            DateTime?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  verificationToken          String?
  verificationTokenExpiresAt DateTime?

  refreshToken         refresh_tokens[]
  orders               orders[]
  sentTransactions     transactions[]   @relation("SentTransactions")
  receivedTransactions transactions[]   @relation("ReceivedTransactions")
  wallets              wallets[]        @relation("UserWallets")
}

model refresh_tokens {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model orders {
  id           Int          @id @default(autoincrement())
  userId       Int
  type         String
  currency     CurrencyType
  amount       Float
  pricePerCoin Float
  fiat         FiatType
  status       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model transactions {
  id              Int          @id @default(autoincrement())
  senderId        Int
  receiverId      Int?
  amount          Float
  currency        CurrencyType
  fiatAmount      Float?
  fiat            FiatType?
  isExternal      Boolean
  externalAddress String?
  createdAt       DateTime     @default(now())

  sender   users  @relation("SentTransactions", fields: [senderId], references: [id], onDelete: Cascade)
  receiver users? @relation("ReceivedTransactions", fields: [receiverId], references: [id], onDelete: Cascade)
}

model wallets {
  id        Int          @id @default(autoincrement())
  userId    Int
  currency  CurrencyType
  balance   Float
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user users @relation("UserWallets", fields: [userId], references: [id], onDelete: Cascade)
}
